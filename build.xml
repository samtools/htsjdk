<?xml version="1.0"?>
<!--
  ~ The MIT License
  ~
  ~ Copyright (c) 2009 The Broad Institute
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy
  ~ of this software and associated documentation files (the "Software"), to deal
  ~ in the Software without restriction, including without limitation the rights
  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  ~ copies of the Software, and to permit persons to whom the Software is
  ~ furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in
  ~ all copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  ~ THE SOFTWARE.
  -->

<project name="htsjdk" basedir="." default="all">

    <property name="src" value="src/java"/>
    <property name="src.test" value="src/tests"/>
    <property name="src.test.java" value="${src.test}/java"/>
    <property name="lib" value="lib"/>
    <property name="dist" value="dist"/>
    <property name="classes" value="classes"/>
    <property name="classes.test" value="testclasses"/>
    <property name="scripts" value="src/scripts"/>
    <property name="test.output" value="dist/test"/>

    <property name="javac.target" value="1.6"/>
    <property name="javac.debug" value="true"/>

    <!-- Get GIT hash, if available, otherwise leave it blank.  -->
    <exec executable="git" outputproperty="repository.revision" failifexecutionfails="true" errorproperty="">
        <arg value="log"/>
        <arg value="-1"/>
        <arg value="--pretty=format:%H_%at"/>
    </exec>
    <property name="repository.revision" value=""/>
    <property name="htsjdk-version" value="1.114"/>
    <property name="htsjdk-version-xml" value="htsjdk.version.property.xml"/>
    <property name="testng.verbosity" value="2"/>
    <property name="test.debug.port" value="5005" />  <!-- override on the command line if desired -->

    <condition  property="isUnix">
        <os family="unix"/>
    </condition>
    <target name="set_excluded_test_groups_unix" if="isUnix">
        <property name="excludedTestGroups" value="slow, broken"/>
    </target>
    <target name="set_excluded_test_groups_non_unix" unless="isUnix">
        <property name="excludedTestGroups" value="slow, broken, unix"/>
    </target>
    <target name="set_excluded_test_groups" depends="set_excluded_test_groups_unix,set_excluded_test_groups_non_unix"/>

    <!-- VERSION PROPERTY --> 
    <target name="write-version-property">
        <propertyfile
            file="${htsjdk-version-xml}"
            comment="htsjdk version">
            <entry  key="htsjdk-version" value="${htsjdk-version}"/>
        </propertyfile>
    </target>

    <!-- INIT -->
    <target name="init" depends="write-version-property">
        <path id="classpath">
            <fileset dir="${lib}">
                <include name="**/*.jar"/>
            </fileset>
        </path>
    </target>

    <!-- CLEAN -->
    <target name="clean">
        <delete dir="${classes}"/>
        <delete dir="${classes.test}"/>
        <delete dir="${test.output}"/>
        <delete dir="${dist}"/>
        <delete dir="javadoc"/>
        <delete file="${htsjdk-version-xml}"/>
    </target>

    <!-- COMPILE -->
    <target name="compile" depends="compile-src, compile-tests"
            description="Compile files without cleaning">
    </target>

    <target name="compile-src" depends="compile-samtools, compile-tribble, compile-variant" description="Compile files without cleaning"/>

    <target name="compile-samtools" depends="init" description="Compile sam-samtools files without cleaning">
        <compile-src includes="htsjdk/samtools/**/*.*"/>
    </target>

    <target name="compile-tribble" depends="init, compile-samtools" description="Compile tribble files without cleaning">
        <compile-src includes="htsjdk/tribble/**/*.*"/>
    </target>

    <target name="compile-variant" depends="init, compile-tribble" description="Compile variant files without cleaning">
        <compile-src includes="htsjdk/variant/**/*.*" compiler.args="-proc:none"/>
    </target>

    <target name="compile-tests" depends="compile-samtools-tests, compile-tribble-tests, compile-variant-tests" description="Compile test files without cleaning"/>

    <target name="compile-samtools-tests" depends="init" description="Compile samtools test files without cleaning">
        <compile-tests includes="htsjdk/samtools/**/*.*"/>
    </target>

    <target name="compile-tribble-tests" depends="init" description="Compile tribble test files without cleaning">
        <compile-tests includes="htsjdk/tribble/**/*.*"/>
    </target>

    <target name="compile-variant-tests" depends="init" description="Compile variant test files without cleaning">
        <compile-tests includes="htsjdk/variant/**/*.*" compiler.args="-proc:none"/>
    </target>

    <!-- TEST -->
    <target name="test" depends="compile, set_excluded_test_groups" description="Run unit tests">
        <taskdef resource="testngtasks" classpathref="classpath"/>
        <testng suitename="htsjdk-tests" classpathref="classpath" outputdir="${test.output}"
                failureproperty="tests.failed" excludedgroups="${excludedTestGroups}" workingDir="${basedir}"
                verbose="${testng.verbosity}">
            <classpath>
                <pathelement path="${classes}"/>
                <pathelement path="${classes.test}"/>
                <pathelement path="${scripts}"/>
            </classpath>
            <classfileset dir="${classes.test}">
                <include name="**/Test*.class"/>
                <include name="**/*Test.class"/>
            </classfileset>
            <jvmarg value="-Xmx2G"/>
        </testng>
        <junitreport todir="${dist}/test" >
            <fileset dir="${test.output}">
                <include name="*.xml"/>
            </fileset>
            <report format="noframes" todir="${dist}/test" styledir="etc/test"/>
        </junitreport>
        <copy file="etc/test/testng.css" todir="${dist}/test" overwrite="true"/>
        <fail if="tests.failed" message="There were failed unit tests"/>
    </target>

    <target name="single-test"
            depends="compile, compile-tests"
            description="Compile and run a single test.">
        <taskdef resource="testngtasks" classpathref="classpath"/>
        <fail unless="name" message="Please provide input test: -Dname=..." />

        <condition property="debug.jvm.args" value="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=${test.debug.port}" else="">
          <isset property="test.debug" />
        </condition>

        <testng suitename="htsjdk-single-test" classpathref="classpath" outputdir="${test.output}"
                verbose="${testng.verbosity}">
            <jvmarg line="-Xmx512M ${debug.jvm.args}"/>
            <classpath>
                <pathelement path="${classes}"/>
                <pathelement path="${classes.test}"/>
                <pathelement path="${scripts}"/>
            </classpath>
            <classfileset dir="${classes.test}">
                <include name="**/${name}.class"/>
            </classfileset>
        </testng>
    </target>

    <target name="htsjdk-jar" depends="compile-samtools, compile-tribble, compile-variant"
            description="Builds htsjdk-${htsjdk-version}.jar for inclusion in other projects">
        <mkdir dir="${dist}"/>
        <jar destfile="${dist}/htsjdk-${htsjdk-version}.jar" compress="no">
            <fileset dir="${classes}" includes ="htsjdk/samtools/**/*.*"/>
            <fileset dir="${classes}" includes="htsjdk/tribble/**/*.*"/>
            <fileset dir="${classes}" includes="htsjdk/variant/**/*.*"/>
            <manifest>
                <attribute name="Implementation-Version" value="${hts-version}(${repository.revision})"/>
                <attribute name="Implementation-Vendor" value="Broad Institute"/>
            </manifest>
        </jar>
        <copy todir="${dist}">
            <fileset dir="lib" includes="*.jar"/>
        </copy>
    </target>

    <target name="javadoc" depends="init" description="Generates the project javadoc.">
        <javadoc
                sourcepath="${src}"
                destdir="javadoc"
                packagenames="htsjdk.samtools.*, htsjdk.variant.*, htsjdk.tribble.*"
                windowtitle="HTS JDK API Documentation"
                doctitle="&lt;h1&gt;HTS JDK API Documentation&lt;/h1&gt;"
                author="true"
                protected="true"
                use="true"
                version="true"
                failonerror="true">
            <classpath>
                <pathelement location="${java.home}/../lib/tools.jar" />
                <fileset dir="${lib}">
                    <include name="**/*.jar" />
                </fileset>
            </classpath>
            <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
        </javadoc>
    </target>

    <!-- ALL -->
    <target name="all" depends="compile, htsjdk-jar" description="Default build target">
    </target>

    <!-- ************************************************************************************** -->
    <!-- ************************************************************************************** -->
    <!-- Beginning of taskdefs that are used elsewhere in the build file                        -->
    <!-- ************************************************************************************** -->
    <!-- ************************************************************************************** -->

    <!-- Compile source files specified by includes, from source root. Can specifically
    include or exclude-->
    <macrodef name="compile-src">
        <attribute name="includes" default=""/>
        <attribute name="excludes" default=""/>
        <attribute name="destdir" default="${classes}"/>
        <attribute name="compile.classpath" default="classpath"/>
        <attribute name="compiler.args" default=""/>
        <sequential>
        <mkdir dir="${classes}"/>
            <!-- unset the sourcepath attribute in order to compile only files explicitly specified and disable javac's default searching mechanism -->
            <javac destdir="@{destdir}"
                   optimize="${javac.opt}"
                   debug="${javac.debug}"
                   sourcepath=""
                   srcdir="${src}"
                   includes="@{includes}"
                   excludes="@{excludes}"
                   source="${javac.target}"
                   target="${javac.target}">
                <classpath refid="@{compile.classpath}"/>
                <compilerarg line="@{compiler.args}" />
            </javac>
        </sequential>
    </macrodef>

    <macrodef name="compile-tests">
        <attribute name="includes" default=""/>
        <attribute name="excludes" default=""/>
        <attribute name="compiler.args" default=""/>

        <sequential>
            <mkdir dir="${classes.test}"/>
            <javac destdir="${classes.test}"
                   optimize="${javac.opt}"
                   debug="${javac.debug}"
                   srcdir="${src.test.java}"
                   includes="@{includes}"
                   excludes="@{excludes}"
                   source="${javac.target}"
                   target="${javac.target}">
                <classpath>
                    <path refid="classpath"/>
                    <pathelement location="${classes}"/>
                </classpath>
                <compilerarg line="@{compiler.args}"/>
            </javac>
        </sequential>
    </macrodef>
</project>
